from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from db.schedule import write_day_info
from keyboards.menu import get_main_menu_kb
from keyboards.rate import get_rate_kb
from locales.ru import TEXT
from models.DayInfo import DayInfo
from utils.utils import calculate_time_difference

router = Router()


class Night(StatesGroup):
    start_night_sleep_time = State()
    end_night_sleep_time = State()
    night_rating = State()


@router.message(
    Night.start_night_sleep_time, F.text.lower() == "–æ—Ç–º–µ—Ç–∏—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–æ—á–Ω–æ–≥–æ —Å–Ω–∞ üåÖ"
)
async def end_night_sleep_time(message: Message, state: FSMContext):
    await message.answer("–ö–æ–≥–¥–∞ –≤—ã –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å —É—Ç—Ä–æ–º? (–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú)")
    await state.set_state(Night.end_night_sleep_time)


@router.message(
    Night.start_night_sleep_time,
    F.text,
    F.text.regexp(r"^\d{2}:\d{2}$"),
)
async def start_night_sleep_time_answer(message: Message, state: FSMContext):
    hours = message.text.split(":")[0]
    minutes = message.text.split(":")[1]
    if int(hours) < 0 or int(hours) > 23 or int(minutes) < 0 or int(minutes) > 59:
        await message.answer(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú"
        )
    else:
        await state.update_data(start_night_sleep_time=message.text)
        await message.answer("–û—Ç–º–µ—á–µ–Ω–æ –Ω–∞—á–∞–ª–æ –Ω–æ—á–Ω–æ–≥–æ —Å–Ω–∞")


@router.message(
    Night.end_night_sleep_time,
    F.text,
    F.text.regexp(r"^\d{2}:\d{2}$"),
)
async def end_night_sleep_time_answer(message: Message, state: FSMContext):
    hours = message.text.split(":")[0]
    minutes = message.text.split(":")[1]
    if int(hours) < 0 or int(hours) > 23 or int(minutes) < 0 or int(minutes) > 59:
        await message.answer(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú"
        )
    else:
        await state.update_data(end_night_sleep_time=message.text)
        await state.set_state(Night.night_rating)
        await message.answer(
            "–û—Ç–º–µ—á–µ–Ω–æ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–æ—á–Ω–æ–≥–æ —Å–Ω–∞", reply_markup=ReplyKeyboardRemove()
        )
        await message.answer(TEXT["ru"]["rate"], reply_markup=get_rate_kb())


@router.message(
    Night.start_night_sleep_time,
    F.text,
)
@router.message(
    Night.end_night_sleep_time,
    F.text,
)
async def wrong_time_answer(message: Message, state: FSMContext):
    await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")


@router.callback_query(
    Night.night_rating,
    F.data.in_(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]),
)
async def night_rating(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! \n–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: " + str(call.data),
        reply_markup=get_main_menu_kb(),
    )
    data = await state.get_data()
    start_night_sleep_time = data["start_night_sleep_time"]
    end_night_sleep_time = data["end_night_sleep_time"]
    day_info = DayInfo(
        start_night_sleep_time=start_night_sleep_time,
        end_night_sleep_time=end_night_sleep_time,
        night_duration=calculate_time_difference(
            start_night_sleep_time, end_night_sleep_time
        ),
        night_rating=call.data,
        sleeps=[],
    )
    write_day_info(id=str(call.from_user.id), day_info=day_info)
    await state.clear()


@router.message(StateFilter(None), F.text.lower() == "–æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—á–∞–ª–æ –Ω–æ—á–Ω–æ–≥–æ —Å–Ω–∞ üåÉ")
async def start_night_sleep_time(message: Message, state: FSMContext):
    await state.set_state(Night.start_night_sleep_time)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ—Ç–∏—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–æ—á–Ω–æ–≥–æ —Å–Ω–∞ üåÖ")]],
        one_time_keyboard=True,
        resize_keyboard=True,
    )
    await message.answer(
        "–ö–æ–≥–¥–∞ –≤—ã —É—Å–Ω—É–ª–∏ –Ω–æ—á—å—é? (–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú)",
        reply_markup=keyboard,
    )
